@using ORAGO_CC_Planning.Data
@using ORAGO_CC_Planning.Models

@inject AuthenticationStateProvider authenticationStateProvider

@inject IArticleFinalRepository ArticleService
@inject ICurrencyRepository CurrencyService
@inject ICustomerFinalRepository CustomerService
@inject ITransactionRepository TransactionService
@inject IBudgetEntryRepository BudgetEntryService
@inject IBudgetCurrencyRepository BudgetCurrencyService
@inject IVolumeTemplateRepository VolumeTemplateService


<div class="row p-2">
    <div class="col bg-dark bg-opacity-10 rounded p-2">
        <div class="row">
            <div class="col">
                <SfCard>
                    <CardHeader><b class="text-center">Configure currencies</b>
                    </CardHeader>
                    <CardContent EnableSeparator="true">
                        <div class="row">
                            @if (SuppliedBudgetCurrency is not null)
                            {
                                <div class="col">
                                    <div class="row">
                                        <div class="col">
                                            <SfDropDownList TValue="string" Placeholder="Document currency" TItem="Currency" @bind-Value="@SuppliedBudgetCurrency.DocumentCurrencyCode" DataSource="@currencies"
                                                FloatLabelType="FloatLabelType.Auto" AllowFiltering="true">
                                                <DropDownListFieldSettings Value="ISOCode"></DropDownListFieldSettings>
                                                <DropDownListEvents TItem="Currency" TValue="string" ValueChange="@BudgetCurrencyChanged" ></DropDownListEvents>
                                            </SfDropDownList>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col">
                                            <SfDropDownList Enabled="@enabled" TValue="string" Placeholder="Local currency" TItem="Currency" @bind-Value="@SuppliedBudgetCurrency.LocalCurrencyCode" DataSource="@currencies"
                                                FloatLabelType="FloatLabelType.Auto" AllowFiltering="true">
                                                <DropDownListFieldSettings Value="ISOCode"></DropDownListFieldSettings>
                                                <DropDownListEvents TItem="Currency" TValue="string" ValueChange="@BudgetCurrencyChanged" ></DropDownListEvents>
                                            </SfDropDownList>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-6">
                                    <br/>
                                    <div class="row"><SfRadioButton Label="Document currency" Name="options" Value="Document currency" @bind-Checked="displayCurrency"></SfRadioButton></div>
                                    <div class="row"><SfRadioButton Label="Local currency" Name="options" Value="Local currency" @bind-Checked="displayCurrency"></SfRadioButton></div>
                                    <div class="row"><SfRadioButton Label="Euro" Name="options" Value="Euro" @bind-Checked="displayCurrency"></SfRadioButton></div>
                                </div>
                            }
                        </div>
                        <br />
                        @* @if (exchangeRates is not null && exchangeRates.Count>0)
                        {
                            <div class="row">
                                <SfGrid id="xRsGrid" DataSource="@exchangeRates" TValue="ExchangeRate" AllowPaging="false">
                                    <GridEditSettings AllowAdding="false" AllowDeleting="false" AllowEditing="false"
                                        Mode="EditMode.Normal">
                                    </GridEditSettings>
                                    <GridColumns>
                                        <GridColumn Field=@nameof(ExchangeRate.ExchangeYear) HeaderText="Year"
                                            ValidationRules="@(new ValidationRules{ Required=true})"
                                            Width="auto" EditType="EditType.DefaultEdit" AllowEditing="false">
                                        </GridColumn>
                                        <GridColumn Field=@nameof(ExchangeRate.FromCurrencyCode) HeaderText="From"
                                            ValidationRules="@(new ValidationRules{ Required=true})"
                                            Width="auto" EditType="EditType.DefaultEdit" AllowEditing="false">
                                        </GridColumn>
                                        <GridColumn Field=@nameof(ExchangeRate.ToCurrencyCode) Headertext="To"
                                            ValidationRules="@(new ValidationRules{ Required=true})"
                                            Width="auto" EditType="EditType.DefaultEdit" AllowEditing="false">
                                        </GridColumn>
                                        <GridColumn Field=@nameof(ExchangeRate.ExchangeValue) HeaderText="Rate"
                                            ValidationRules="@(new ValidationRules{ Required=true})" Format="N2"
                                            Width="auto" EditType="EditType.DefaultEdit" AllowEditing="false">
                                        </GridColumn>
                                    </GridColumns>
                                </SfGrid>
                            </div>
                        } *@
                    </CardContent>
                </SfCard>
                <div class="col-12 e-round p-2" style="text-align:center;">
                    <SfCard>
                        <CardHeader>
                            <span class="bg-dark bg-gradient text-white p-2 text-center rounded" style=" width:100%;">Total Articles</span>
                        </CardHeader>
                        <CardStacked>
                            <div class="p-2">
                                <h3 class=" text-center">@countTotalArticles</h3>
                            </div>
                        </CardStacked>
                    </SfCard>
                </div>
            </div>
            <div class="col">
                @if (VolumeTemplateService.ListLoading)
                {
                    <div class="bg-info text-white p-3 rounded lead">Volume templates loading...</div>
                }
                else
                {
                    if (volumeTemplates is null)
                    {
                        <div class="text-danger p-3 rounded lead">Volume templates not found in database.</div>
                    }
                    else
                    {
                        <SfDropDownList TValue="int" Placeholder="VolumeTemplate" @bind-Value="@volumeTemplateId" DataSource="volumeTemplates" 
                            TItem="VolumeTemplate" FloatLabelType="FloatLabelType.Auto" AllowFiltering="true">
                            <DropDownListEvents TItem="VolumeTemplate" TValue="int" ValueChange="@VolumeTemplateSelected" ></DropDownListEvents>
                            <DropDownListFieldSettings Text="Name" Value="Id"></DropDownListFieldSettings>
                        </SfDropDownList>
                    }
                }
                <br />
                @if (volumeTemplate is not null)
                {
                    <div class="row"><div class="col-5"><b>Jan: </b></div><div class="col">@((volumeTemplate.Month1Percentage/100).ToString("P2"))</div></div>
                    <div class="row"><div class="col-5"><b>Feb: </b></div><div class="col">@((volumeTemplate.Month2Percentage/100).ToString("P2"))</div></div>
                    <div class="row"><div class="col-5"><b>Mar: </b></div><div class="col">@((volumeTemplate.Month3Percentage/100).ToString("P2"))</div></div>
                    <div class="row"><div class="col-5"><b>Apr: </b></div><div class="col">@((volumeTemplate.Month4Percentage/100).ToString("P2"))</div></div>
                    <div class="row"><div class="col-5"><b>May: </b></div><div class="col">@((volumeTemplate.Month5Percentage/100).ToString("P2"))</div></div>
                    <div class="row"><div class="col-5"><b>Jun: </b></div><div class="col">@((volumeTemplate.Month6Percentage/100).ToString("P2"))</div></div>
                    <div class="row"><div class="col-5"><b>Jul: </b></div><div class="col">@((volumeTemplate.Month7Percentage/100).ToString("P2"))</div></div>
                    <div class="row"><div class="col-5"><b>Aug: </b></div><div class="col">@((volumeTemplate.Month8Percentage/100).ToString("P2"))</div></div>
                    <div class="row"><div class="col-5"><b>Sep: </b></div><div class="col">@((volumeTemplate.Month9Percentage/100).ToString("P2"))</div></div>
                    <div class="row"><div class="col-5"><b>Oct: </b></div><div class="col">@((volumeTemplate.Month10Percentage/100).ToString("P2"))</div></div>
                    <div class="row"><div class="col-5"><b>Nov: </b></div><div class="col">@((volumeTemplate.Month11Percentage/100).ToString("P2"))</div></div>
                    <div class="row"><div class="col-5"><b>Dec: </b></div><div class="col">@((volumeTemplate.Month12Percentage/100).ToString("P2"))</div></div>
                }
            </div>
        </div>
        <div class="row">
            <div class="col-9">
                @* <div class="col-12 e-round p-2" style="text-align:center;">
                    <SfCard>
                        <CardHeader><span class="bg-dark bg-gradient text-white p-2 text-center rounded" style=" width:100%;">Total
                            Articles</span>
                        </CardHeader>
                        <CardStacked>
                            <div class="p-2">
                                <h1 class=" text-center">0</h1>
                            </div>
                        </CardStacked>
                    </SfCard>
                </div> *@
            </div>
            <div class="col-6 e-round p-2" style="text-align:center;">
                <SfCard>
                    <CardHeader>
                        <span class="bg-dark bg-gradient text-white p-2 text-center rounded" style=" width:100%;">Completed Articles</span>
                    </CardHeader>
                    <CardStacked>
                        <div class="p-2">
                            <h3 class="text-center">@countCompleteArticles</h3>
                        </div>
                    </CardStacked>
                </SfCard>
            </div>
            <div class="col-6 e-round p-2" style="text-align:center;">
                <SfCard>
                    <CardHeader><span class="bg-dark bg-gradient text-white p-2 text-center rounded" style=" width:100%;">Open
                        Articles</span>
                    </CardHeader>
                    <CardStacked>
                        <div class="p-2">
                            <h3 class="text-center">@countIncompleteAeticles</h3>
                        </div>
                    </CardStacked>
                </SfCard>
            </div>
        </div>
    </div>
</div>
@code 
{
    [Parameter] 
    public BudgetCurrency? SuppliedBudgetCurrency { get; set;}
    public bool enabled { get; set; } = false;
    private int budgetStartYear {get; set; } = DateTime.Now.Year + 1;
    private CustomerFinal? customer;
    private int customerId;
    private YearlyLock? yearlyLock;
    private List<Currency>? currencies;
    private string displayCurrency = "Document currency";
    private VolumeTemplate? volumeTemplate;
    private int volumeTemplateId;
    private List<VolumeTemplate>? volumeTemplates; 
    private List<ArticleFinal>? userArticles;
    private int countTotalArticles;
    private int countCompleteArticles;
    private int countIncompleteAeticles;
    private List<BudgetEntry>? userBudgetEntries;
    private List<BudgetEntry>? interestingBudgetEntries;
    private List<BudgetEntry>? completedBudgetEntries;
    private List<BudgetEntry>? incompleteBudgetEntries;
      
    protected override async Task OnInitializedAsync()
    {
        customer = await CustomerService.GetByIdAsync(customerId);
        currencies = await CurrencyService!.GetAllAsync();
        volumeTemplates = await VolumeTemplateService!.GetAllAsync();
        await FetchUserCustomerArticles(customer);        
    }
    public async Task FetchUserCustomerArticles(CustomerFinal givenCustomer)
    {
        userArticles = new();
        interestingBudgetEntries = new();
        userBudgetEntries = new();
        completedBudgetEntries = new();
        incompleteBudgetEntries = new();
        countCompleteArticles = 0;
        countIncompleteAeticles = 0;
        countTotalArticles = 0;
        if ((givenCustomer.BpCode is not null) && (givenCustomer.Id != 0))
        {
            List<String?> articleNames = await TransactionService!.GetArticleNamesByCustomerAsync(givenCustomer.BpCode);
            foreach (string? articleName in articleNames)
            {
                if (!ArticleService!.ListLoading)
                {
                    ArticleFinal article = await ArticleService.GetByItemNrAsync(articleName);
                    if ((article is not null) && (article.Id != 0))
                     {
                        userArticles.Add(article);
                        List<BudgetEntry> itsBudgetEntries = await BudgetEntryService!.GetByYearVersionCustomerArticleForIndexAsync(budgetStartYear,
                        article, givenCustomer, yearlyLock?.Name);
                        itsBudgetEntries = itsBudgetEntries.Where(e => e.DurationNumber == 13).ToList();
                        userBudgetEntries?.AddRange(itsBudgetEntries);
                        BudgetCurrency itsBudgetCurrency = await BudgetCurrencyService!.GetByYearVersionCustomerArticleAsync(budgetStartYear,
                        article, givenCustomer, yearlyLock?.Name);
                        if (itsBudgetCurrency.PlanningComplete)
                        {
                            countCompleteArticles++;
                            completedBudgetEntries.AddRange(itsBudgetEntries);
                        }
                        else
                        {
                            countIncompleteAeticles++;
                            incompleteBudgetEntries.AddRange(itsBudgetEntries);
                        }
                    }
                }
            }
        }
        interestingBudgetEntries = userBudgetEntries;
        countTotalArticles = userArticles.Count();
    }
    private async Task BudgetCurrencyChanged(ChangeEventArgs<string, Currency> args)
    {
        if (SuppliedBudgetCurrency is not null && SuppliedBudgetCurrency.Id != 0)
        {
            await SuppliedBudgetCurrency.SetModifyInfo(authenticationStateProvider!);
            await BudgetCurrencyService!.UpdateEntityAsync(SuppliedBudgetCurrency);
        }
    }
    private async Task VolumeTemplateSelected(ChangeEventArgs<int, VolumeTemplate> args)
    {
        if (!VolumeTemplateService!.SingleLoading) volumeTemplate = await VolumeTemplateService.GetByIdAsync(args.ItemData.Id);
    }
    
}